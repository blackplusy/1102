1.列表
a.栈的方式访问列表
	队列:先进先出，后进后出
	栈:  后进先出，先进后出
		append()  追加
		pop()     弹出
b.获取列表的索引
	index()  元素在列表中第一次出现时候的索引
	enumerate()  枚举
c.排序
	reverse()  反向打印
	sort()     排序
d.补充
	insert() 	通过索引和值进行元素的新增
	extend()    扩展(元素,列表)
e.列表推导式
	列表解析式，简单方法创建列表
	结构中包含一个表达式，可以有0个或者多个if条件
	表达式可以使用任意类型对象，返回的结果是新的列表
	优势:
		代码短，可读性好
		速度快
	标准格式
		[表达式 for 变量 in 列表]
		[表达式 for 变量 in 列表 if 条件]
2.元组
元组和列表类似，小括号中包含元素，元素之间通过逗号进行分割
(1,2,3)
('simida','gaga')
a.元组和列表的区别
	敏感信息传递给一个不了解的函数，希望这个数据不要被改动使用元组
	处理动态数据时候，经常更新数据，使用列表
	元组不可变，列表可变
	元组的速度块
b.创建元组
	如果元组中只有一个元素，需要在后面增加逗号消除歧义
c.访问元组
	直接访问
	遍历访问
	成员访问
d.删除元组
	del 删除整个元组
e.元组的切片和索引
f.补充
	len() 元素的个数
	max() 最大值
	min() 最小值
	index() 元组中某个值第一次出现的索引
	count() 元组中某个元素出现的次数	
3.字典
a.应用场景
	1>接口开发
	2>前后端数据传输
b.创建字典
	字典是python中的映射数据类型
	大括号中键值对组成'name':'gaga'
	一般来说是由字符串或者数字作为键
c.访问字典
	直接访问
	数据筛选
d.删除字典
	del
		删除指定元素(键值对)
		删除整个字典(不能访问)
	clear
		清空，可以访问
e.修改字典
f.补充内容
	1.keys(键值对)
	2.values(值)
	3.items(键值对)
