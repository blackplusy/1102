1.SQL的分类
	SQL:结构化查询语言
		DDL:数据库定义语言  create alter drop truncate
		DML:数据库操作语言  insert update delete
		DQL:数据库查询语言  select
		DCL:数据库控制语言  grant revoke
2.事务
	一件事有开端有结尾
	落魄老师---------------bank------------大佬们
		commit  提交 数据到数据库中，除非人为修改否则不会变化
		rollback 回滚 数据库状态恢复到最后一次提交的状态
	DML会触发事务的开始，就一定要结束
3.数据的新增
	数值类型数据直接使用
	字符类型数据加单引号
	日期类型数据加to_date()函数
	sysdate 系统当前时间
	a.向表中指定列新增数据
		语法:insert into 表(列1,列2) values(值1,值2);
		需求:向日本表中新增数据，主角苍老师，售价1000
		insert into 日本(电影名称主角,电影售价) values('苍老师',1000);
		需求:日本表中新增数据，主角，周杰伦，价格3000，发行日期当前时间
		insert into 日本(电影名称主角,电影售价,发行日期) values('周杰伦',3000,sysdate);
	b.向表中所有列新增数据
		语法:insert into 表 values(值1,值2,值3...)
		需求:向日本表中新增数据，主角老毕，售价2000，发行日期2000-01-01
		insert into 日本 values('老毕',2000,to_date('2000-01-01','YYYY-MM-DD'));
		insert into 日本 values('老毕',2000,to_date('2000-01-01 18:00:00','YYYY-MM-DD  hh24:mi:ss'));
4.数据的修改
	数值类型数据直接使用
	字符类型数据加单引号
	日期类型数据加to_date()函数
	语法:update 表 set 列=值 where 条件;
	如果不加where条件，默认修改的是列中所有的值
	如果增加where条件，修改的是指定行的列的值
	需求:修改日本表中名字是周杰伦的，售价为998
	update 日本 set 电影售价=998 where 电影名称主角='周杰伦';
	需求:修改日本表中所有电影售价为0
	update 日本 set 电影售价=0;
5.数据的删除
	delete    可以删除指定数据，删除数据可以找回，DML
	truncate  只能删除表中所有数据，破坏了表中数据的结构，删除数据无法找回 DDL
	a.delete
		语法:delete 表 where 条件;
		如果增加where条件删除的是指定行的数据
		如果不加where条件删除的是整表数据
		需求:删除日本表中名字是老毕的所有信息
		delete from 日本 where 电影名称主角='老毕';
		commit;
		需求:删除日本表中所有数据
		delete from 日本;
		commit;
	b.truncate
		语法:truncate table 表;
		需求:删除日本表中所有数据
		truncate table 日本;
6.数据的查询
	a.简单查询
		emp表结构:
			empno 员工号
			ename 员工名字
			job   职位
			mgr   上司的员工号
			hiredate 入职日期
			sal    工资
			comm   佣金
			deptno 部门号
		语法:select 列 from 表 where 条件;
		1>查询所有数据
			*代表所有列
			需求:查询emp表中所有的数据
			select * from emp;
			select empno,ename,job,mgr,hiredate,sal,comm,deptno from emp;	
		2>查询指定列数据
			需求:查询emp表中所有员工名字和工资
			select ename,sal from emp;
		3>查询指定行数据
			需求:查询名字为SCOTT的所有信息
			select * from emp where ename='SCOTT';
		4>查询指定行的列的数据
			需求:查询名字为KING的人的工资
			select sal from emp where ename='KING';
	b.where子句
		1>比较
			>
			<
			=
			>=
			<=
			!=
			<>
		需求:查询emp表中工资高于2000的人的所有信息
			select * from emp where sal>2000;
		需求:查询emp表中员工名字不是KING的所有信息
			select * from emp where ename<>'KING';
		2>关系
			and 	同时满足
			or  	满足一个即可
			not     不满足
		需求:查询工资高于1000并且低于2000的所有员工名字
			select ename from emp where sal>1000 and sal<2000;
		需求:查询员工名字为ALLEN或者KING的所有信息
			select * from emp where ename='ALLEN' or ename='KING';
		3>区间
			between...and...
			包含两个端点，小在前，大在后，通常用于范围
		需求:查询emp表中薪资范围800和1200之间的所有信息
			select * from emp where sal>=800 and sal<=1200;
			select * from emp where sal between 800 and 1200;
		4>空值
			空没有任何数据类型没有任何值，不能用于比较和运算
			查询使用is null或者 is not null
			也可以使用nvl函数或者nvl2函数
		需求:查询emp表中佣金为空的所有信息
			select * from emp where comm is null;
		nvl函数
			select comm,nvl(comm,0) from emp
			nvl(需要判断是否为空的列,如果为空显示的值) 
		5>模糊查询
			当信息不完整时候使用模糊，通常和字符类型一起使用
			like 模糊查询关键字
			_    一个字符
			%    任意个字符
		需求:查询emp表中名字以S开头的所有信息
			select * from emp where ename like 'S%';
		需求:查询emp表中名字不以T结尾的所有信息
			select * from emp where ename not like '%T';
		需求:查询emp表中名字是6个字符的所有信息
			select * from emp where ename like '______';
		6>in
			或者的关系
		需求:查询员工名字为ALLEN或者KING的所有信息
			select * from emp where ename in ('ALLEN','KING');
		7>常见函数
			upper()   大写
			lower()   小写
			initcap() 首字母大写
			select ename,lower(ename),initcap(ename),upper(lower(ename)) from emp;
			round()   小数点后保留几位
			select ename,lower(ename),initcap(ename),upper(lower(ename)) from emp;
			avg()     平均值
			distinct()去重
			select distinct(job) from emp;
















